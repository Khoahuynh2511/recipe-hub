---
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { 
  title, 
  description = "Discover delicious food recipes and drinks from around the world",
  image = "/images/default-og.jpg"
} = Astro.props;

// Base URL for production
const siteUrl = import.meta.env.SITE || "https://recipe-hub.netlify.app";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href="/icons/logo.png" />
    <title>{title} | RecipeHub</title>
    <meta name="description" content={description} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, siteUrl).href} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url.href} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, siteUrl).href} />
    
    <!-- Preload fonts -->
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Montserrat:wght@700;800&display=swap"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Montserrat:wght@700;800&display=swap"
        rel="stylesheet"
        type="text/css"
      />
    </noscript>
    
    <!-- PWA tags -->
    <meta name="theme-color" content="#38a169" />
    <link rel="manifest" href="/manifest.json" />
    <link rel="apple-touch-icon" href="/icons/apple-touch-icon.png" />
    
    <!-- Service worker registration -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/service-worker.js')
            .then(registration => {
              console.log('Service Worker registered with scope:', registration.scope);
            })
            .catch(error => {
              console.log('Service Worker registration skipped in development mode');
              // Khong hien loi trong moi truong phat trien
              // console.error('Service Worker registration failed:', error);
            });
        });
      }
    </script>
  </head>
  <body class="min-h-screen bg-gray-50 text-gray-900 flex flex-col">
    <header class="bg-white shadow-sm sticky top-0 z-10">
      <div class="container mx-auto px-4 py-3 flex items-center justify-between">
        <!-- Logo -->
        <a href="/" class="flex items-center gap-2">
          <img src="/icons/logo.png" alt="RecipeHub Logo" class="h-8" />
          <span class="font-display font-bold text-xl text-primary-600">RecipeHub</span>
        </a>
        
                <!-- Navigation -->        <nav class="hidden md:flex items-center gap-6">          <a href="/" class="text-gray-700 hover:text-primary-600 font-medium">Home</a>          <a href="/explore" class="text-gray-700 hover:text-primary-600 font-medium">Explore</a>          <a href="/search" class="text-gray-700 hover:text-primary-600 font-medium">Search</a>        </nav>
        
        <!-- Mobile menu button -->
        <button 
          id="mobile-menu-button" 
          class="md:hidden flex items-center p-2 rounded-md text-gray-700 hover:text-primary-600 hover:bg-gray-100"
          aria-label="Menu"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
        
        <!-- Shopping list / Cookbook button -->
                <button           id="toggle-sidebar"           class="ml-4 flex items-center p-2 rounded-md text-gray-700 hover:text-primary-600 hover:bg-gray-100"          aria-label="Saved recipes and shopping list"        >          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />          </svg>        </button>
      </div>
      
      <!-- Mobile Navigation -->
      <div id="mobile-menu" class="md:hidden hidden bg-white border-t border-gray-100">        <div class="container mx-auto px-4 py-3 flex flex-col gap-3">          <a href="/" class="text-gray-700 hover:text-primary-600 py-2 font-medium">Home</a>          <a href="/explore" class="text-gray-700 hover:text-primary-600 py-2 font-medium">Explore</a>          <a href="/search" class="text-gray-700 hover:text-primary-600 py-2 font-medium">Search</a>        </div>      </div>
    </header>
    
    <main class="flex-1">
      <slot />
    </main>
    
    <footer class="bg-gray-800 text-white py-6">
      <div class="container mx-auto px-4">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          <div>
            <h3 class="text-lg font-semibold mb-3">RecipeHub</h3>
            <p class="text-gray-300 text-sm">
              Discover delicious food recipes and drinks from around the world
            </p>
          </div>
          
                    <div>            <h3 class="text-lg font-semibold mb-3">Links</h3>            <ul class="space-y-2 text-gray-300 text-sm">              <li><a href="/" class="hover:text-primary-300">Home</a></li>              <li><a href="/explore" class="hover:text-primary-300">Explore</a></li>              <li><a href="/search" class="hover:text-primary-300">Search</a></li>            </ul>          </div>
          
                    <div>            <h3 class="text-lg font-semibold mb-3">Data Sources</h3>            <ul class="space-y-2 text-gray-300 text-sm">              <li><a href="https://www.themealdb.com" target="_blank" class="hover:text-primary-300">TheMealDB</a></li>              <li><a href="https://www.thecocktaildb.com" target="_blank" class="hover:text-primary-300">TheCocktailDB</a></li>              <li><a href="https://tasty.co" target="_blank" class="hover:text-primary-300">Tasty</a></li>            </ul>          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Installation</h3>
            <p class="text-gray-300 text-sm mb-2">
              Add RecipeHub to your home screen for quick access
            </p>
            <button 
              id="install-app" 
              class="px-3 py-1 text-sm bg-primary-600 text-white rounded hover:bg-primary-700 transition-colors hidden"
            >
              Install App
            </button>
          </div>
        </div>
        
        <div class="mt-8 pt-6 border-t border-gray-700 text-center text-gray-400 text-sm">
          <p>Â© {new Date().getFullYear()} RecipeHub. All rights reserved.</p>
        </div>
      </div>
    </footer>
    
    <!-- Shopping List / Cookbook Sidebar -->
    <div 
      id="sidebar" 
      class="fixed inset-y-0 right-0 w-80 max-w-full bg-white shadow-xl transform translate-x-full transition-transform duration-300 z-50"
    >
      <div class="h-full flex flex-col">
        <div class="p-4 border-b flex items-center justify-between">
          <h2 class="text-lg font-semibold">Recipes & Shopping</h2>
          <button id="close-sidebar" class="p-2 rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-100">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div class="flex-1 overflow-y-auto p-4">
          <!-- Tab Navigation -->
          <div class="flex border-b mb-4">
            <button 
              id="tab-cookbook" 
              class="flex-1 py-2 px-4 font-medium border-b-2 border-primary-500 text-primary-600"
            >
              Cookbook
            </button>
            <button 
              id="tab-shopping" 
              class="flex-1 py-2 px-4 font-medium border-b-2 border-transparent text-gray-500"
            >
              Shopping
            </button>
          </div>
          
          <!-- Cookbook Panel -->
          <div id="cookbook-panel" class="space-y-4">
            <div id="cookbook-list" class="space-y-3">
              <div class="text-center py-8 text-gray-500" id="cookbook-empty">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                </svg>
                <p>No saved recipes yet</p>
                <p class="text-sm">Click "Save Recipe" on a recipe page to save it</p>
              </div>
            </div>
          </div>
          
          <!-- Shopping List Panel -->
          <div id="shopping-panel" class="hidden space-y-4">
            <div class="flex items-center justify-between mb-2">
              <h3 class="font-medium">Shopping List</h3>
              <div class="flex gap-2">
                <button 
                  id="export-shopping-list" 
                  class="p-1 rounded text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                  title="Export CSV"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                  </svg>
                </button>
                <button 
                  id="clear-shopping-list" 
                  class="p-1 rounded text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                  title="Clear All"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
            
            <div id="shopping-list" class="space-y-2">
              <div class="text-center py-8 text-gray-500" id="shopping-empty">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                <p>Shopping list is empty</p>
                <p class="text-sm">Add ingredients from recipes to start your list</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

<script>
  // Import the store functions
  import { 
    getCookbook, 
    removeFromCookbook, 
    getShoppingList,
    updateShoppingListItem,
    removeFromShoppingList,
    clearShoppingList,
    exportShoppingListCSV
  } from '../lib/store';

  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  
  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });
  
  // Sidebar toggle
  const toggleSidebarButton = document.getElementById('toggle-sidebar');
  const closeSidebarButton = document.getElementById('close-sidebar');
  const sidebar = document.getElementById('sidebar');
  
  toggleSidebarButton?.addEventListener('click', () => {
    sidebar?.classList.toggle('translate-x-full');
    
    // Load data when sidebar is opened
    if (!sidebar?.classList.contains('translate-x-full')) {
      loadCookbookItems();
      loadShoppingList();
    }
  });
  
  closeSidebarButton?.addEventListener('click', () => {
    sidebar?.classList.add('translate-x-full');
  });
  
  // Tab switching
  const tabCookbook = document.getElementById('tab-cookbook');
  const tabShopping = document.getElementById('tab-shopping');
  const cookbookPanel = document.getElementById('cookbook-panel');
  const shoppingPanel = document.getElementById('shopping-panel');
  
  tabCookbook?.addEventListener('click', () => {
    tabCookbook.classList.add('border-primary-500', 'text-primary-600');
    tabCookbook.classList.remove('border-transparent', 'text-gray-500');
    tabShopping?.classList.remove('border-primary-500', 'text-primary-600');
    tabShopping?.classList.add('border-transparent', 'text-gray-500');
    
    cookbookPanel?.classList.remove('hidden');
    shoppingPanel?.classList.add('hidden');
    
    // Reload cookbook when switching to this tab
    loadCookbookItems();
  });
  
  tabShopping?.addEventListener('click', () => {
    tabShopping.classList.add('border-primary-500', 'text-primary-600');
    tabShopping.classList.remove('border-transparent', 'text-gray-500');
    tabCookbook?.classList.remove('border-primary-500', 'text-primary-600');
    tabCookbook?.classList.add('border-transparent', 'text-gray-500');
    
    shoppingPanel?.classList.remove('hidden');
    cookbookPanel?.classList.add('hidden');
    
    // Reload shopping list when switching to this tab
    loadShoppingList();
  });
  
  // Load cookbook items
  async function loadCookbookItems() {
    try {
      const cookbookList = document.getElementById('cookbook-list');
      const cookbookEmpty = document.getElementById('cookbook-empty');
      
      if (!cookbookList) return;
      
      // Get the cookbook items from store functions
      const cookbookData = await getCookbook();
      
      // Clear current items
      const existingItems = cookbookList.querySelectorAll('.cookbook-item');
      existingItems.forEach(item => item.remove());
      
      // Show/hide empty state
      if (cookbookData.length === 0) {
        cookbookEmpty?.classList.remove('hidden');
        return;
      } else {
        cookbookEmpty?.classList.add('hidden');
      }
      
      // Create cookbook items
      cookbookData.forEach(item => {
        const recipeData = item.data;
        const recipeName = item.type === 'meal' ? recipeData.strMeal : recipeData.strDrink;
        const recipeImg = item.type === 'meal' ? recipeData.strMealThumb : recipeData.strDrinkThumb;
        
        const itemElement = document.createElement('div');
        itemElement.className = 'cookbook-item bg-white rounded-lg shadow p-3 flex gap-3';
        itemElement.innerHTML = `
          <img src="${recipeImg}/preview" alt="${recipeName}" class="w-16 h-16 object-cover rounded-md" />
          <div class="flex-1 min-w-0">
            <h4 class="font-medium text-gray-900 truncate">${recipeName}</h4>
            <p class="text-sm text-gray-500 capitalize">${item.type}</p>
            <div class="mt-1 flex gap-1">
              <a href="/recipe/${item.type}/${item.id}" class="text-xs px-2 py-0.5 rounded bg-primary-100 text-primary-700 hover:bg-primary-200">View</a>
              <button class="remove-recipe text-xs px-2 py-0.5 rounded bg-gray-100 text-gray-700 hover:bg-gray-200" data-id="${item.id}" data-type="${item.type}">Remove</button>
            </div>
          </div>
        `;
        
        cookbookList.appendChild(itemElement);
        
        // Add event listener to remove button
        const removeBtn = itemElement.querySelector('.remove-recipe');
        removeBtn?.addEventListener('click', async (e) => {
          const id = e.currentTarget.getAttribute('data-id');
          const type = e.currentTarget.getAttribute('data-type');
          
          // Remove from storage using store function
          await removeFromCookbook(id, type);
          
          // Remove element
          itemElement.remove();
          
          // Show empty state if no more items
          if (cookbookList.querySelectorAll('.cookbook-item').length === 0) {
            cookbookEmpty?.classList.remove('hidden');
          }
          
          // Dispatch event to update UI elements that might depend on this
          document.dispatchEvent(new CustomEvent('cookbook-updated'));
        });
      });
    } catch (error) {
      console.error('Error loading cookbook items:', error);
    }
  }
  
  // Load shopping list
  async function loadShoppingList() {
    try {
      const shoppingList = document.getElementById('shopping-list');
      const shoppingEmpty = document.getElementById('shopping-empty');
      
      if (!shoppingList) return;
      
      // Get the shopping list items from store function
      const shoppingData = await getShoppingList();
      
      // Clear current items
      const existingItems = shoppingList.querySelectorAll('.shopping-item');
      existingItems.forEach(item => item.remove());
      
      // Remove category headers
      const categoryHeaders = shoppingList.querySelectorAll('.category-header');
      categoryHeaders.forEach(header => header.remove());
      
      // Show/hide empty state
      if (shoppingData.length === 0) {
        shoppingEmpty?.classList.remove('hidden');
        return;
      } else {
        shoppingEmpty?.classList.add('hidden');
      }
      
      // Group items by category
      const groupedItems = {};
      shoppingData.forEach(item => {
        if (!groupedItems[item.category]) {
          groupedItems[item.category] = [];
        }
        groupedItems[item.category].push(item);
      });
      
      // Display items by category
      Object.keys(groupedItems).sort().forEach(category => {
        // Add category header
        const categoryHeader = document.createElement('div');
        categoryHeader.className = 'category-header text-sm font-medium text-gray-500 capitalize mt-4 mb-2';
        categoryHeader.textContent = category;
        shoppingList.appendChild(categoryHeader);
        
        // Add items in this category
        groupedItems[category].forEach(item => {
          const itemElement = document.createElement('div');
          itemElement.className = 'shopping-item flex items-center gap-2 bg-white rounded-lg shadow-sm p-2';
          itemElement.dataset.category = category;
          itemElement.innerHTML = `
            <input type="checkbox" class="shopping-checkbox h-4 w-4 text-primary-600 rounded border-gray-300" data-id="${item.id}" ${item.checked ? 'checked' : ''}>
            <div class="flex-1 min-w-0">
              <div class="flex justify-between">
                <div class="font-medium text-sm ${item.checked ? 'line-through text-gray-400' : 'text-gray-700'}">${item.name}</div>
                <div class="text-xs text-gray-500">${item.quantity}</div>
              </div>
              ${item.recipe ? `<div class="text-xs text-gray-500">From: ${item.recipe}</div>` : ''}
            </div>
            <button class="remove-item text-gray-400 hover:text-gray-600" data-id="${item.id}">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          `;
          
          shoppingList.appendChild(itemElement);
          
          // Add event listener to checkbox
          const checkbox = itemElement.querySelector('.shopping-checkbox');
          checkbox?.addEventListener('change', async (e) => {
            const id = e.currentTarget.getAttribute('data-id');
            const checked = e.currentTarget.checked;
            
            // Update in storage using store function
            await updateShoppingListItem(id, { checked });
            
            // Update UI
            const itemText = itemElement.querySelector('.font-medium');
            if (checked) {
              itemText?.classList.add('line-through', 'text-gray-400');
              itemText?.classList.remove('text-gray-700');
            } else {
              itemText?.classList.remove('line-through', 'text-gray-400');
              itemText?.classList.add('text-gray-700');
            }
          });
          
          // Add event listener to remove button
          const removeBtn = itemElement.querySelector('.remove-item');
          removeBtn?.addEventListener('click', async () => {
            const id = removeBtn.getAttribute('data-id');
            
            // Remove from storage using store function
            await removeFromShoppingList(id);
            
            // Get the category header for this item
            const categoryHeader = shoppingList.querySelector(`.category-header:has(+ .shopping-item[data-category="${category}"])`);
            
            // Remove element
            itemElement.remove();
            
            // Clean up category header if no items left
            const itemsInCategory = shoppingList.querySelectorAll(`.shopping-item[data-category="${category}"]`);
            if (itemsInCategory.length === 0 && categoryHeader) {
              categoryHeader.remove();
            }
            
            // Show empty state if no more items
            if (shoppingList.querySelectorAll('.shopping-item').length === 0) {
              shoppingEmpty?.classList.remove('hidden');
            }
            
            // Dispatch event to update UI elements that might depend on this
            document.dispatchEvent(new CustomEvent('shopping-list-updated'));
          });
        });
      });
    } catch (error) {
      console.error('Error loading shopping list:', error);
    }
  }
  
  // Add event listeners for export and clear buttons
  const exportButton = document.getElementById('export-shopping-list');
  exportButton?.addEventListener('click', async () => {
    try {
      // Get CSV content using store function
      const csv = await exportShoppingListCSV();
      
      // Create download link
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `shopping-list-${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error exporting shopping list:', error);
    }
  });
  
  const clearButton = document.getElementById('clear-shopping-list');
  clearButton?.addEventListener('click', () => {
    if (confirm('Are you sure you want to clear your shopping list?')) {
      try {
        // Clear from storage using store function
        clearShoppingList();
        
        // Update UI
        const shoppingList = document.getElementById('shopping-list');
        const shoppingEmpty = document.getElementById('shopping-empty');
        
        // Clear current items
        const existingItems = shoppingList?.querySelectorAll('.shopping-item');
        existingItems?.forEach(item => item.remove());
        
        // Remove category headers
        const categoryHeaders = shoppingList?.querySelectorAll('.category-header');
        categoryHeaders?.forEach(header => header.remove());
        
        // Show empty state
        shoppingEmpty?.classList.remove('hidden');
        
        // Dispatch event to update UI elements that might depend on this
        document.dispatchEvent(new CustomEvent('shopping-list-updated'));
      } catch (error) {
        console.error('Error clearing shopping list:', error);
      }
    }
  });
  
  // Listen for custom events from recipe pages
  document.addEventListener('cookbook-updated', () => {
    loadCookbookItems();
  });
  
  document.addEventListener('shopping-list-updated', () => {
    loadShoppingList();
  });
  
  // PWA install prompt
  let deferredPrompt;
  const installButton = document.getElementById('install-app');
  
  window.addEventListener('beforeinstallprompt', (e) => {
    // Prevent Chrome 67 and earlier from automatically showing the prompt
    e.preventDefault();
    // Stash the event so it can be triggered later
    deferredPrompt = e;
    // Show the install button
    installButton?.classList.remove('hidden');
  });
  
  installButton?.addEventListener('click', async () => {
    if (!deferredPrompt) return;
    
    // Show the install prompt
    deferredPrompt.prompt();
    
    // Wait for the user to respond to the prompt
    const { outcome } = await deferredPrompt.userChoice;
    
    // Hide the install button regardless of outcome
    installButton.classList.add('hidden');
    
    // Clear the saved prompt
    deferredPrompt = null;
  });
  
  // If already installed, hide the button
  window.addEventListener('appinstalled', () => {
    installButton?.classList.add('hidden');
    deferredPrompt = null;
  });
  
  // Load data on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', () => {
    // Initial load if sidebar is open
    if (sidebar && !sidebar.classList.contains('translate-x-full')) {
      if (cookbookPanel && !cookbookPanel.classList.contains('hidden')) {
        loadCookbookItems();
      }
      if (shoppingPanel && !shoppingPanel.classList.contains('hidden')) {
        loadShoppingList();
      }
    }
  });
</script> 